"""This module parses the contents of the file '/etc/passwd' and
returns a list whose elements are dictionaries with keys.

Examples:
    import passwd_parser

    res = passwd_parser.read_passwd(file_path)

"""

FILE_NAME = '/etc/passwd'
LIST_KEYS = [
    'name',
    'password',
    'UID',
    'GID',
    'GECOS',
    'directory',
    'shell'
]

LENGTH_LINE = 7


class BaseModuleException(Exception):
    """This base class for all exceptions in this module
    """
    pass


class ParserException(BaseModuleException):
    """Exceptions generated by the transmission of incorrect data
    """
    pass


def _parser_passwd(passwd_line):
    """This function parses the contents of strings based on a
    delimiter ':' and returns a dictionaries with keys:
        login, passwd, user_id, group_id, comment, home, interpreter

    >>> res = _parser_passwd('root:x:0:0:root:/root:/bin/bash')
    >>> res['GECOS'] == 'root', res['directory'] == '/root'
    (True, True)
    >>> res['GID'] ==  '0', res['UID'] == '0'
    (True, True)
    >>> res['shell'] == '/bin/bash', res['name'] == 'root'
    (True, True)
    >>> res['password'] == 'x'
    True
    >>> res = _parser_passwd(u'root:x:0:0:root:/root:/bin/bash')
    >>> res['GECOS'] == 'root', res['directory'] == '/root'
    (True, True)
    >>> res['GID'] ==  '0', res['UID'] == '0'
    (True, True)
    >>> res['shell'] == '/bin/bash', res['name'] == 'root'
    (True, True)
    >>> res['password'] == 'x'
    True
    >>> _parser_passwd(-1)
    Traceback (most recent call last):
        ...
    ParserException: passwd_line must be str
    >>> _parser_passwd({})
    Traceback (most recent call last):
        ...
    ParserException: passwd_line must be str
    """
    if isinstance(passwd_line, unicode):
        passwd_line = passwd_line.encode()

    if not isinstance(passwd_line, str):
        raise ParserException('passwd_line must be str')

    fields = passwd_line.split(':')
    if len(fields) != LENGTH_LINE:
        raise ParserException('invalid format string')

    return dict(zip(LIST_KEYS, fields))


def _str_to_int(number):
    """This function converts the number represented as a string in int.
    If this is not possible, the value doesn't change.

    >>> _str_to_int('0')
    0
    >>> _str_to_int('str')
    'str'
    >>> _str_to_int([])
    []
    """
    result = number
    try:
        result = int(number)
    except (ValueError, TypeError):
        pass
    return result


def read_passwd(file_path=FILE_NAME):
    """ This function reads the contents of file '/etc/passwd' and
    returns a list whose elements are dictionaries.

    >>> result = read_passwd('tests/passwd')
    >>> isinstance(result, list)
    True
    >>> result[0]['name'] == 'root'
    True
    >>> read_passwd('file')
    Traceback (most recent call last):
        ...
    IOError: [Errno 2] No such file or directory: 'file'
    >>> read_passwd('tests/passwderror')
    Traceback (most recent call last):
        ...
    ParserException: id conversion from str to int: fail
    """
    result = []
    with open(file_path, 'r') as passwd_file:
        for passwd_line in passwd_file:
            dict_passwd_line = _parser_passwd(passwd_line.strip())
            dict_passwd_line['UID'] = _str_to_int(dict_passwd_line['UID'])
            dict_passwd_line['GID'] = _str_to_int(dict_passwd_line['GID'])
            if isinstance(dict_passwd_line['UID'], str) or \
                    isinstance(dict_passwd_line['GID'], str):
                raise ParserException('id conversion from str to int: fail')
            result.append(dict_passwd_line)

    return result


if __name__ == '__main__':
    import doctest
    doctest.testmod()
