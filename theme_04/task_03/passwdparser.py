"""This module parses the contents of the file '/etc/passwd' and
returns a list whose elements are dictionaries with keys.

Examples:
    import passwdparser

    res = passwdparser.read_passwd(file_path)

"""

FILE_NAME = '/etc/passwd'
LIST_KEYS = [
    'login',
    'passwd',
    'id_user',
    'id_group',
    'comment',
    'home',
    'interpreter'
]

LEN_LINE = 7
FILE_ERROR = -1


class BaseModuleException(Exception):
    """This base class for all exceptions in this module
    """
    pass


class ParserException(BaseModuleException):
    """Exceptions generated by the transmission of incorrect data
    """
    pass


def _parser_passwd(passwd_line):
    """This function parses the contents of strings based on a
    delimiter ':' and returns a dictionaries with keys:
        login, passwd, id_user, id_group, comment, home, interpreter

    >>> res = _parser_passwd('root:x:0:0:root:/root:/bin/bash')
    >>> res['comment'] == 'root', res['home'] == '/root'
    (True, True)
    >>> res['id_group'] ==  '0', res['id_user'] == '0'
    (True, True)
    >>> res['interpreter'] == '/bin/bash', res['login'] == 'root'
    (True, True)
    >>> res['passwd'] == 'x'
    True
    >>> _parser_passwd(-1)
    Traceback (most recent call last):
        ...
    ParserException: passwd_line must be str
    >>> _parser_passwd({})
    Traceback (most recent call last):
        ...
    ParserException: passwd_line must be str
    """
    if not isinstance(passwd_line, str):
        raise ParserException('passwd_line must be str')
    line = passwd_line.split(':')

    if len(line) != LEN_LINE:
        raise ParserException('invalid format string')

    return dict(zip(LIST_KEYS, passwd_line.split(':')))


def read_passwd(file_path=FILE_NAME):
    """ This function reads the contents of file '/etc/passwd' and
    returns a list whose elements are dictionaries. If can't open
    the file, it returns -1.

    >>> res = read_passwd()
    >>> isinstance(res, list)
    True
    >>> res[0]['login'] == 'root'
    True
    >>> read_passwd('file')
    Traceback (most recent call last):
        ...
    IOError: [Errno 2] No such file or directory: 'file'
    """
    res = []
    file_ = open(file_path, 'r')

    for line in file_:
        res.append(_parser_passwd(line.strip()))
    file_.close()

    return res


if __name__ == '__main__':
    import doctest
    doctest.testmod()
